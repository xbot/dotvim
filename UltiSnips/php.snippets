clearsnippets array in

snippet pub "Public function" b
public function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet .. "->" i
->${0}
endsnippet

snippet this "$this->" i
$this->${0}
endsnippet

snippet vbq "$query" i
$query${0}
endsnippet

snippet vbr "$result" i
$result${0}
endsnippet

snippet vbd "$data" i
$data${0}
endsnippet

snippet vbi "$item" i
$item${0}
endsnippet

snippet vb "Variable" i
$${1:id}${0}
endsnippet

snippet ppt "$obj->property" i
$${1:user}->${2:id}
endsnippet

snippet php "Multi-line <?php ?>"
<?php
${1}
endsnippet

snippet phps "Single-line <?php ?>" w
<?php ${1} ?>
endsnippet

snippet ?= "Single-line <?= $var >" i
<?= $${1:var} ?>
endsnippet

snippet clog "ChromePhp::log()" i
require_once('ChromePhp.php'); ChromePhp::log($${1:var});${0}
endsnippet

snippet cwarn "ChromePhp::warn()" i
require_once('ChromePhp.php'); ChromePhp::warn($${1:var});${0}
endsnippet

snippet cerror "ChromePhp::error()" i
require_once('ChromePhp.php'); ChromePhp::error($${1:var});${0}
endsnippet

snippet fpc "file_put_contents+print_r in UNIX"
file_put_contents('${1:/tmp/z.joy}', print_r(${2}, true)."\n\n", FILE_APPEND);${3}
endsnippet

snippet fpc2 "file_put_contents+var_export in UNIX"
file_put_contents('${1:/tmp/z.joy}', var_export(${2}, true)."\n\n", FILE_APPEND);${3}
endsnippet

snippet trace "file_put_contents+debug_trace"
foreach(debug_backtrace() as $k=>$v){
    if($v['function'] == "include" || $v['function'] == "include_once" || $v['function'] == "require_once" || $v['function'] == "require"){
        $$2 .= "#".$k." ".$v['function']."(".$v['args'][0].") called at [".$v['file'].":".$v['line']."]\n";
    }else{
        $$2 .= "#".$k." ".$v['function']."() called at [".$v['file'].":".$v['line']."]\n";
    }
}
file_put_contents('${1:/tmp/z.joy}', "$${2:stackstr}\n\n", FILE_APPEND);${3}
endsnippet

snippet ifs "Single-line if statement"
if (${1:/* condition */}) ${2:/* code... */};${3}
endsnippet

snippet try "try ... catch"
try {
    ${1:// code}
} catch (${2:\Exception} $${3:e}) {
    ${4:// code}
}${5}
endsnippet

snippet clos "function($param) use ($var) {}" i
function($${1:param})${2: use ($${3:var})} {${4}}${0}
endsnippet

snippet todo "// TODO: " "re.match('^\s*', snip.buffer[snip.line-1])" be
// TODO: ${1}
endsnippet

snippet todo "// TODO: " "re.match('^\s*// ', snip.buffer[snip.line-1])" ie
TODO: ${1}
endsnippet

snippet kv "key => value pair" i
'${1:key}' => ${2:$${3:value}},${0}
endsnippet

# php functions start
snippet vexp "var_export($var, true)" i
var_export($${1:var}${2:, true})${0}
endsnippet

snippet amap "array_map()" i
array_map(${1:callback}, ${2:$${3:arr}})${0}
endsnippet

snippet afil "array_filter()" i
array_filter($${1:arr}, ${2:callback})${0}
endsnippet

snippet apop "array_pop()" i
array_pop(${1:$${2:arr}})${0}
endsnippet

snippet arand "array_rand()" i
array_rand($${1:arr}, ${2:5})${0}
endsnippet

snippet asli "array_slice()" i
array_slice(${1:$${2:arr}}, ${3:0}${4:, ${5:5}})${0}
endsnippet

snippet avals "array_values()" i
array_values(${1:$${2:arr}})${0}
endsnippet

snippet akeys "array_keys()" i
array_keys(${1:$${2:arr}})${0}
endsnippet

snippet auq "array_unique()" i
array_unique(${1:$${2:arr}})${0}
endsnippet

snippet ac "count()" i
count(${1:$${2:arr}})${0}
endsnippet

snippet ina "in_array()" i
in_array(${1:$${2:var}}, ${3:$${4:arr}})${0}
endsnippet

snippet achu "array_chunk()" i
array_chunk(${1:$${2:arr}}, ${3:size})${0}
endsnippet

snippet awal "array_walk()" i
array_walk($${1:arr}, ${2:callback})${0}
endsnippet

snippet emp "empty() or !empty()" i
${1:! }empty(${2:$${3:var}})${0}
endsnippet

snippet jenc "json_encode()" i
json_encode(${1:$${2:var}})${0}
endsnippet

snippet jdec "json_decode()" i
json_decode(${1:$${2:var}}${3:, true})${0}
endsnippet

snippet fexists "function_exists()" i
function_exists('${1}')
endsnippet
# php functions end

# php comment start
snippet pa "@param" i
@param ${1:int} $${2:var} ${3:desc}
endsnippet

snippet au "@author lidong" i
@author lidong
endsnippet

snippet ret "@return mixed" i
@return ${1:void}
endsnippet

snippet ver "@since and @version" i
@since ${1:1.0}
* @version $1
endsnippet

snippet thr "@throws" i
@throws ${1:\Exception}
endsnippet
# php comment end

# unit tests start
snippet asm "$this->assertEmpty()" b
$this->assertEmpty(${1:$${2:arr}});${0}
endsnippet

snippet asnm "$this->assertNotEmpty()" b
$this->assertNotEmpty(${1:$${2:arr}});${0}
endsnippet
# unit tests end

snippet st "$st = microtime(true);" b
$st = microtime(true);${0}
endsnippet

snippet et "$et = microtime(true);" b
$et = microtime(true);
var_dump('${1:1}:'.($et-$st));${0}
endsnippet

snippet prd "print_r() and die()" b
print_r(${1:$${2:var}}); die();${0}
endsnippet

snippet thr "throw new Exception" b
throw new ${1:Client}Exception('${2}', ${3:422});${0}
endsnippet
